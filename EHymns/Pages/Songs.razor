@page "/songs"
@using EHymns
@using EHymns.Data
@using EHymns.Models
@using Syncfusion.Blazor.Cards
<h1>My Favorite Songs</h1>
<div class="row d-flex justify-content-center align-items-center mt-2">
    <div class="col-md-6">
        <div class="form">
            <i class="oi oi-magnifying-glass"></i>
            <input @oninput="(e)=>OnSearch(e)" type="text" class="form-control form-input" placeholder="Search any song...">
            <span class="left-pan">
                <button @onclick="VoiceSearch" class="btn-trans" disabled="@(!enable)"> <i class="oi oi-microphone"></i></button>
            </span>
        </div>
    </div>
</div>
@if (viewSearchData)
{

    <div style="max-height:100vh; overflow:auto" class="mt-3 container">
        @foreach (var item in searchResults)
    {
        <div class="row mb-2">

                <SfCard ID="@item.Number">
                    <CardHeader Title="@item.Title.ToUpper()" />
                    <CardContent>
                        <h6>Song No: @item.Number</h6>
                    </CardContent>
                    <CardFooter>
                        <CardFooterContent>
                            <div class="d-flex flex-row m-3">
                                <SfButton OnClick="()=>Sing(item.Number)" CssClass="e-btn e-outline e-primary mr-2">Sing</SfButton>
                                <SfButton OnClick="()=>Remove(item)" CssClass="e-btn e-outline e-danger">Remove</SfButton>
                            </div>
                        </CardFooterContent>
                    </CardFooter>
                </SfCard>
            </div>
    }

    </div>
}
else
{

    @if ((!searchResults.Any()) && isSearching)
{
    <div class="alert m-3 alert-warning alert-dismissible fade show" role="alert">
            No results found
            <button @onclick="Refresh" type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="True">&times;</span>
            </button>
        </div><div style="min-height:600px;" class="mt-3 container">
    </div>
}
    
}
@if (!isSearching && !searchResults.Any() && !viewSearchData)
{

    <div class="alert mt-3 alert-warning alert-dismissible fade show" role="alert">
        No favourite songs found.
        <button type="button" @onclick='()=>Navigation.NavigateTo("/")' class="close" data-dismiss="alert" aria-label="Close">
            <span  aria-hidden="True">&times;</span>
        </button>
    </div>
    <div style="min-height:600px;" class="mt-3 container">
    </div>
}

<style>
    .page {
        background: #F4F7FD;
        margin-top: 20px;
    }
    .btn-trans{
        cursor:pointer;
        border:none;
        background-color:transparent;
    }
    .form {
        position: relative;
    }

        .form .oi-magnifying-glass {
            position: absolute;
            top: 20px;
            left: 20px;
            color: #9ca3af;
        }


        .form span {
            position: absolute;
            right: 17px;
            top: 13px;
            padding: 2px;
            border-color: #d1d5db;
            border-left: 1px solid #d1d5db;
        }

    .left-pan {
        padding-left: 7px;
    }

        .left-pan i {
            padding-left: 10px;
        }

    .form-input {
        height: 55px;
        text-indent: 33px;
        border-radius: 10px;
    }

        .form-input:focus {
            box-shadow: none;
            border: none;
        }

</style>
@code {

List<Hymn> searchResults = new();
bool enable = true;
string searchString = "";

protected override async Task OnInitializedAsync()
{
    await Refresh();

    MessagingCenter.Subscribe<ISpeechToText, string>(this, "STT", (sender, args) =>
       {
           SpeechToTextFinalResultRecieved(args);
       });

    MessagingCenter.Subscribe<ISpeechToText>(this, "Final", (sender) =>
    {
        enable = true;
    });

    MessagingCenter.Subscribe<IMessageSender, string>(this, "STT", (sender, args) =>
    {
        SpeechToTextFinalResultRecieved(args);
    });
}
void Sing(string id)
{
    Navigation.NavigateTo($"sing/{id}");
}
async Task Refresh()
{
    searchResults = (await Database.GetFavourites()).ToList();
    viewSearchData = searchResults.Any();
    isSearching = false;
    StateHasChanged();
}
async Task Remove(Hymn item)
{
    var accept = await Application.Current.MainPage.DisplayAlert("Remove Song", "Remove this song from your favourites?", accept: "Yes", cancel: "No");
    if (!accept)
    {
        return;
    }
    await Database.RemoveFromFavorites(item); await Refresh();
}
private void SpeechToTextFinalResultRecieved(string args)
{
    OnSearch(new Microsoft.AspNetCore.Components.ChangeEventArgs() { Value = args });
    StateHasChanged();

}
void VoiceSearch()
{
    try
    {
        speechToText.StartSpeechToText();
    }
    catch
    {

    }
    if (Microsoft.Maui.Devices.DeviceInfo.Platform == Microsoft.Maui.Devices.DevicePlatform.iOS)
    {
        enable = false;
    }

}
bool viewSearchData, isSearching;
async void OnSearch(Microsoft.AspNetCore.Components.ChangeEventArgs args)
{
    isSearching = true;
    var value = (string)args.Value;
    if (string.IsNullOrWhiteSpace(value))
    {
        viewSearchData = false;
        StateHasChanged();
        return;
    }
    searchResults.Clear();
    searchResults = await Database.Search(value, true);
    viewSearchData = searchResults.Any();
    StateHasChanged();
}
}