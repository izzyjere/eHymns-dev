@page "/"
@using EHymns
@using EHymns.Data

@using EHymns.Models
@using Syncfusion.Blazor.Cards

<div class="row d-flex justify-content-center align-items-center">
    <div class="col-md-6">
        <div class="form">
            <i class="oi oi-magnifying-glass"></i>
            <input @oninput="(e)=>OnSearch(e)" @bind-value="searchString" type="text" class="form-control form-input" placeholder="Search any song...">
            <span class="left-pan">
                <button @onclick="VoiceSearch" class="btn-trans" disabled="@(!enable)"> <i class="oi oi-microphone"></i></button>
            </span>
        </div>
    </div>
</div>
@if (viewSearchData)
{

    <div style="max-height:400px; overflow:auto" class="mt-3 container">
        <div class="row mb-2">
            @foreach (var item in searchResults)
            {
                <SfCard ID="@item.Number">
                    <CardHeader Title="@item.Title.ToUpper()" />
                    <CardContent>
                        <h6>Song No: @item.Number</h6>
                    </CardContent>
                    <CardFooter>
                        <CardFooterContent>
                            <SfButton OnClick="()=>Sing(item.Number)" CssClass="e-btn e-outline e-primary">Sing</SfButton>
                        </CardFooterContent>
                    </CardFooter>
                </SfCard>
            }
        </div>
    </div>
}
else
{
    if ((!searchResults.Any()) && isSearching)
    {
        <div class="alert alert-warning alert-dismissible fade show" role="alert">
            No results found
            <button @onclick="Refresh" type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="True">&times;</span>
            </button>
        </div>
    }
}
@if (!isSearching)
{
    <h3 class="mt-4">@GetHeader()</h3>
    <div class="page">
        <div class="container bootstrap">
            <div class="row">
                @if (songs.Any())
                {
                    foreach (var song in songs)
                    {
                        <SfCard CssClass="mb-2" ID="@song.Number">
                            <CardHeader Title="@song.TitleWithHymnNumber" />
                            <CardFooter>
                                <CardFooterContent>
                                    <SfButton OnClick="()=>Sing(song.Number)" CssClass="e-btn e-outline e-primary">Sing</SfButton>
                                </CardFooterContent>
                            </CardFooter>
                        </SfCard>
                    }

                }
                else
                {
                    <div class="alert alert-warning alert-dismissible fade show" role="alert">
                        <strong>No song</strong> You can search for a song above.
                        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                            <span aria-hidden="True">&times;</span>
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
}
<style>

    .form {
        position: relative;
    }

        .form .oi-magnifying-glass {
            position: absolute;
            top: 20px;
            left: 20px;
            color: #9ca3af;
        }


        .form span {
            position: absolute;
            right: 17px;
            top: 13px;
            padding: 2px;
            border-color: #d1d5db;
            border-left: 1px solid #d1d5db;
        }

    .btn-trans {
        cursor: pointer;
        border: none;
        background-color: transparent;
    }

    .left-pan {
        padding-left: 7px;
    }

        .left-pan i {
            padding-left: 10px;
        }

    .form-input {
        height: 55px;
        text-indent: 33px;
        border-radius: 10px;
    }

        .form-input:focus {
            box-shadow: none;
            border: none;
        }

    .page {
        background: #F4F7FD;
        margin-top: 20px;
    }
</style>
@code {
    List<Hymn> songs = new();
    bool enable = true;
    string searchString = "";

    protected override async Task OnInitializedAsync()
    {
        await Permissions.RequestAsync<Permissions.Microphone>();
        await  Permissions.RequestAsync<Permissions.Speech>();
        await Refresh();
        language = await SecureStorage.GetAsync("language");

        MessagingCenter.Subscribe<ISpeechToText, string>(this, "STT", (sender, args) =>
           {
               SpeechToTextFinalResultRecieved(args);
           });

        MessagingCenter.Subscribe<ISpeechToText>(this, "Final", (sender) =>
        {
            enable = true;
        });

        MessagingCenter.Subscribe<IMessageSender, string>(this, "STT", (sender, args) =>
        {
            SpeechToTextFinalResultRecieved(args);
        });
        base.OnInitialized();
    }
    async Task Refresh()
    {
        isSearching = false;
        viewSearchData = false;
        songs = (await Database.GetHymns()).ToList();
        StateHasChanged();
    }
    string language = string.Empty;
    List<Hymn> searchResults = new();
    private async void SpeechToTextFinalResultRecieved(string args)
    {
        OnSearch(new Microsoft.AspNetCore.Components.ChangeEventArgs() { Value = args });
    }
    void Sing(string id)
    {
        Navigation.NavigateTo($"sing/{id}");
    }
    async Task AddToFavorites(Hymn model)
    {
        await Database.AddToFavorites(model);
    }
    void VoiceSearch()
    {
        try
        {
            speechToText.StartSpeechToText();
        }
        catch(Exception ex)
        {
            ToastService.Show(ex.Message);
        }
        if (Microsoft.Maui.Devices.DeviceInfo.Platform == Microsoft.Maui.Devices.DevicePlatform.iOS)
        {
            enable = false;
        }

    }
    bool viewSearchData, isSearching;
    async void OnSearch(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        isSearching = true;
        var value = (string)args.Value;
        if (string.IsNullOrWhiteSpace(value))
        {
            viewSearchData = false;
            StateHasChanged();
            return;
        }
        searchResults.Clear();
        searchResults = await Database.Search(value);
        viewSearchData = searchResults.Any();
        StateHasChanged();
    }
    string GetHeader() => language switch
    {
        "english" => "English Songs",
        "bemba" => "Bemba Songs",
        "lozi" => "Nkoya, Mbunda, Lozi Songs",
        "kaonde" => "Kaonde",
        _ => "All Songs"
    };
   }